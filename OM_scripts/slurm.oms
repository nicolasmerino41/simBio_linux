val epsilon = Val[Double]
val sigma = Val[Double]
val alpha = Val[Double]
val initial_abundance = Val[Double]
val threshold = Val[Double]
val average_shannon = Val[Double]
val biomass_distribution = Val[Double]
// Seed declaration for random number generation
val myseed = Val[Int]

val juliaTask = JuliaTask(
  script = (workDirectory / "mwe_trial.jl"),
  libraries = Seq("CSV", "DataFrames", "Distributions", "NamedArrays", "StaticArrays", "Serialization", "Rasters", "DimensionalData", "OrderedCollections", "StatsBase", "ArchGDAL"),
  install = Seq(
    """julia -e 'using Pkg; Pkg.add(PackageSpec(url="https://github.com/cesaraustralia/DynamicGrids.jl", rev="dev"))'""",
    """julia -e 'using Pkg; Pkg.add(PackageSpec(url="https://github.com/cesaraustralia/Dispersal.jl", rev="dev"))'"""
  ),
  version = "1.10.4"
) set(
  inputs += epsilon.mapped,
  inputs += sigma.mapped,
  inputs += alpha.mapped,
  inputs += initial_abundance.mapped,
  outputs += average_shannon mapped "average_shannon",
  outputs += biomass_distribution mapped "biomass_distribution",
  resources += (workDirectory / "DFs/gbif_sizes.csv"),
  resources += (workDirectory / "DFs/TetraEU_pairwise_interactions.csv"),
  resources += (workDirectory / "DFs/TetraEU_generic_diet.csv"),
  resources += (workDirectory / "DFs/DB_Amphibians_IP.txt"),
  resources += (workDirectory / "DFs/DB_Birds_IP.txt"),
  resources += (workDirectory / "DFs/DB_Mammals_IP.txt"),
  resources += (workDirectory / "DFs/DB_Reptiles_IP.txt"),
  resources += (workDirectory / "Objects/DA_with_abundances_all100.jls"),
  resources += (workDirectory / "Objects/DA_sum.jls"),
  resources += (workDirectory / "Objects/DA_richness.jls"),
  resources += (workDirectory / "DFs/npp_absolute_df.csv"),
  resources += (workDirectory / "Objects/iberian_interact_df.jls"),
  resources += (workDirectory / "Objects/bio5.jls"),
  resources += (workDirectory / "Objects/bio6.jls"),
  resources += (workDirectory / "Objects/bio12.jls"),
  resources += (workDirectory / "DFs/iberian_species_niches_withbinned_TH.csv"),
  resources += (workDirectory / "DFs/iberian_species_niches_withLaxNiche.csv"),
  resources += (workDirectory / "DFs/iberian_species_niches_withVeryStrictNiche.csv"),
  resources += (workDirectory / "DFs/herbivore_names.csv"),
  resources += (workDirectory / "DFs/Species_spain_df.csv"),
  resources += (workDirectory / "Objects/npp_DA.jls"),
  resources += (workDirectory / "Objects/updated_utmraster.tif"),
  resources += (workDirectory / "Objects/DA.jls"),
  resources += (workDirectory / "Objects/DA_birmmals.jls"),
  resources += (workDirectory / "Objects/DA_herps.jls"),
  resources += (workDirectory / "Objects/wildareas-v3-2009-human-footprint.tif"),
  resources += (workDirectory / "DFs/TLs.csv"),
  resources += (workDirectory / "HerpsVsBirmmals.jl"),
  resources += (workDirectory / "efficient_setup.jl"),
  resources += (workDirectory / "human_footprint.jl"),
  resources += (workDirectory / "New_metrics.jl")
)

val env =
  SLURMEnvironment(
    "nmerino",
    "drago.csic.es",
    partition = "express",
    threads = 100,
    cpuPerTask = 1,
    memory = 4 gigabytes,
    time = 1 hour,
    workDirectory = "lustre/home/mncn/nmerino/Contenedor/simBio"
  )

PSEEvolution(
  evaluation = juliaTask,
  parallelism = 100,
  termination = 600, // Set according to your needs
  genome = Seq(
    epsilon in (0.33, 3.0),
    sigma in (0.0001, 0.1),
    alpha in (0.000001, 1.0),
    initial_abundance in (0.01, 1.0)
  ),
  objective = Seq(
    biomass_distribution in (1.0 to 3.0 by 0.1),
    average_shannon in (0.0 to 6.0 by 0.3)
  ),
  stochastic = Stochastic(seed = myseed)
) by Island(5 minutes) hook (workDirectory / "mwe_trial", frequency = 5) on env