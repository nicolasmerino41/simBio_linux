val mu = Val[Double]
val NPP = Val[Double]
val num_pred = Val[Double]
val num_herb = Val[Double]
val H0_mean = Val[Double]
val connectivity = Val[Double]
val total_biomass = Val[Double]
val prop_of_sp_extinct = Val[Double]
val m_mean_h = Val[Double]
val m_mean_p = Val[Double]
val c_mean_p = Val[Double]

val nppModel = JuliaTask(
  script = (workDirectory / "nppModel_forOM_SR.jl"),
  libraries = Seq("DifferentialEquations", "Distributions", "Random", "SciMLBase"),
) set (
  inputs += mu.mapped,
  inputs += NPP.mapped,
  inputs += num_pred.mapped,
  inputs += num_herb.mapped,
  inputs += H0_mean.mapped,
  inputs += connectivity.mapped,
  inputs += m_mean_h.mapped,
  inputs += m_mean_p,
  inputs += c_mean_p,
  outputs += total_biomass mapped "total_biomass",
  outputs += prop_of_sp_extinct mapped "prop_of_sp_extinct"
)

val env = LocalEnvironment(1)

// SA method
SensitivitySaltelli(
  evaluation = nppModel,
  sample = 20000,
  inputs  = Seq(
    mu  in (0.0 to 1.0),
    NPP in (10.0 to 10000.0),
    m_mean_h in (0.001 to 0.6),
    m_mean_p in (0.001 to 0.6),
    num_herb in (3.0 to 20.0),
    num_pred in (0.0 to 10.0),
    H0_mean in (1.0 to 1000.0),
    connectivity in (0.0 to 1.0),
    c_mean_p in (0.0 to 1.0)
    ),
  outputs = Seq(total_biomass, prop_of_sp_extinct)
) hook (workDirectory / "saltelli_nppModel_20000samples.omr") on env
