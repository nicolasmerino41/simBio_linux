val epsilon = Val[Double]
val sigma = Val[Double]
val alpha = Val[Double]
val initial_abundance = Val[Double]
val threshold = Val[Double]
val average_shannon = Val[Double]
val biomass_distribution = Val[Double]
// Seed declaration for random number generation
val myseed = Val[Int]

val juliaTask = JuliaTask(
  script = (workDirectory / "iteration.jl"),
  libraries = Seq("CSV", "DataFrames", "Distributions", "NamedArrays", "StaticArrays", "Serialization", "Rasters", "DimensionalData", "OrderedCollections", "StatsBase", "ArchGDAL"),
  install = Seq(
    """julia -e 'using Pkg; Pkg.add(PackageSpec(url="https://github.com/cesaraustralia/DynamicGrids.jl", rev="dev"))'""",
    """julia -e 'using Pkg; Pkg.add(PackageSpec(url="https://github.com/cesaraustralia/Dispersal.jl", rev="dev"))'"""
  ),
  hostFiles = Seq(
    HostFile((workDirectory / "DFs/gbif_sizes.csv").toString, "/workdir/gbif_sizes.csv"),
    HostFile((workDirectory / "DFs/TetraEU_pairwise_interactions.csv").toString, "/workdir/TetraEU_pairwise_interactions.csv"),
    HostFile((workDirectory / "DFs/TetraEU_generic_diet.csv").toString, "/workdir/TetraEU_generic_diet.csv"),
    HostFile((workDirectory / "DFs/DB_Amphibians_IP.txt").toString, "/workdir/DB_Amphibians_IP.txt"),
    HostFile((workDirectory / "DFs/DB_Birds_IP.txt").toString, "/workdir/DB_Birds_IP.txt"),
    HostFile((workDirectory / "DFs/DB_Mammals_IP.txt").toString, "/workdir/DB_Mammals_IP.txt"),
    HostFile((workDirectory / "DFs/DB_Reptiles_IP.txt").toString, "/workdir/DB_Reptiles_IP.txt"),
    HostFile((workDirectory / "Objects/DA_with_abundances_all100.jls").toString, "/workdir/DA_with_abundances_all100.jls"),
    HostFile((workDirectory / "Objects/DA_sum.jls").toString, "/workdir/DA_sum.jls"),
    HostFile((workDirectory / "Objects/DA_richness.jls").toString, "/workdir/DA_richness.jls"),
    HostFile((workDirectory / "DFs/npp_absolute_df.csv").toString, "/workdir/npp_absolute_df.csv"),
    HostFile((workDirectory / "Objects/iberian_interact_df.jls").toString, "/workdir/iberian_interact_df.jls"),
    HostFile((workDirectory / "Objects/bio5.jls").toString, "/workdir/bio5.jls"),
    HostFile((workDirectory / "Objects/bio6.jls").toString, "/workdir/bio6.jls"),
    HostFile((workDirectory / "Objects/bio12.jls").toString, "/workdir/bio12.jls"),
    HostFile((workDirectory / "DFs/iberian_species_niches_withbinned_TH.csv").toString, "/workdir/iberian_species_niches_withbinned_TH.csv"),
    HostFile((workDirectory / "DFs/iberian_species_niches_withLaxNiche.csv").toString, "/workdir/iberian_species_niches_withLaxNiche.csv"),
    HostFile((workDirectory / "DFs/iberian_species_niches_withVeryStrictNiche.csv").toString, "/workdir/iberian_species_niches_withVeryStrictNiche.csv"),
    HostFile((workDirectory / "DFs/herbivore_names.csv").toString, "/workdir/herbivore_names.csv"),
    HostFile((workDirectory / "DFs/Species_spain_df.csv").toString, "/workdir/Species_spain_df.csv"),
    HostFile((workDirectory / "Objects/npp_DA.jls").toString, "/workdir/npp_DA.jls"),
    HostFile((workDirectory / "Objects/updated_utmraster.tif").toString, "/workdir/updated_utmraster.tif"),
    HostFile((workDirectory / "Objects/DA.jls").toString, "/workdir/DA.jls"),
    HostFile((workDirectory / "Objects/DA_birmmals.jls").toString, "/workdir/DA_birmmals.jls"),
    HostFile((workDirectory / "Objects/DA_herps.jls").toString, "/workdir/DA_herps.jls"),
    HostFile((workDirectory / "Objects/wildareas-v3-2009-human-footprint.tif").toString, "/workdir/wildareas-v3-2009-human-footprint.tif"),
    HostFile((workDirectory / "DFs/TLs.csv").toString, "/workdir/TLs.csv"),
    HostFile((workDirectory / "HerpsVsBirmmals.jl").toString, "/workdir/HerpsVsBirmmals.jl"),
    HostFile((workDirectory / "efficient_setup.jl").toString, "/workdir/efficient_setup.jl"),
    HostFile((workDirectory / "human_footprint.jl").toString, "/workdir/human_footprint.jl"),
    HostFile((workDirectory / "New_metrics.jl").toString, "/workdir/New_metrics.jl")
  ),
  version = "1.10.4"
) set(
  inputs += epsilon.mapped,
  inputs += sigma.mapped,
  inputs += alpha.mapped,
  inputs += initial_abundance.mapped,
  outputs += average_shannon mapped "average_shannon",
  outputs += biomass_distribution mapped "biomass_distribution"
)

val env = LocalEnvironment(1)

PSEEvolution(
  evaluation = juliaTask,
  parallelism = 1,
  termination = 600, // Set according to your needs
  genome = Seq(
    epsilon in (0.05, 3.0),
    sigma in (0.0001, 100.0),
    alpha in (0.00001, 1.0),
    initial_abundance in (0.01, 1.0)
  ),
  objective = Seq(
    biomass_distribution in (1.0 to 3.0 by 0.1),
    average_shannon in (0.0 to 6.0 by 0.3)
  ),
  stochastic = Stochastic(seed = myseed)
) hook (workDirectory / "pse_2000ts", frequency = 5) on env
