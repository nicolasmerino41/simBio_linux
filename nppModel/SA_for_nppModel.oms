val mu = Val[Double]
val NPP = Val[Double]
//val num_predators = Val[Int]
//val num_herbivores = Val[Int]
val H0_mean = Val[Double]
val connectivity = Val[Double]
val total_biomass = Val[Double]
val prop_of_sp_extinct = Val[Double]
val m_mean_h = Val[Double]
val m_mean_p = Val[Double]

val juliaTask = JuliaTask(
  script = (workDirectory / "nppModel_forOM.jl"),
  libraries = Seq("DifferentialEquations", "Distributions", "Random", "SciMLBase"),
) set (
  inputs += mu.mapped,
  inputs += NPP.mapped,
//  inputs += num_predators.mapped,
//  inputs += num_herbivores.mapped,
  inputs += H0_mean.mapped,
  inputs += connectivity.mapped,
  inputs += m_mean_h.mapped,
  inputs += m_mean_p,
  outputs += total_biomass mapped "total_biomass",
  outputs += prop_of_sp_extinct mapped "prop_of_sp_extinct"
)

val env = LocalEnvironment(1)

// SA method
SensitivityMorris(
  evaluation = juliaTask,
  sample = 100,
  level = 10,
  inputs  = Seq(
    mu  in (0.0 to 1.0),
    NPP in (10.0 to 10000.0),
    m_mean_h in (0.001 to 0.6),
    m_mean_p in (0.001 to 0.6),
//    num_herbivores in (3 to 20),
//    num_predators in (0 to 10),
    H0_mean in (1.0 to 1000.0),
    connectivity in (0.0 to 1.0 by 0.2) 
    ),
  outputs = Seq(total_biomass, prop_of_sp_extinct)
) hook (workDirectory / "sa_short.omr") on env