val mu = Val[Double]
val NPP = Val[Double]
val num_predators = Val[Int]
val num_herbivores = Val[Int]
val H0_mean = Val[Double]
val connectivity = Val[Double]
val total_biomass = Val[Double]
val value = Val[Double]

val juliaTask = JuliaTask(
  script = (workDirectory / "nppModel_forOM.jl"),
  libraries = Seq("DifferentialEquations", "Distributions", "Random")
) set (
  inputs += mu.mapped,
  inputs += NPP.mapped,
  inputs += num_predators.mapped,
  inputs += num_herbivores.mapped,
  inputs += H0_mean.mapped,
  inputs += connectivity.mapped,
  outputs += total_biomass mapped "total_biomass",
  outputs += value mapped "value"
)

val env = LocalEnvironment(10)

OSEEvolution(
  evaluation = juliaTask,
  parallelism = 10,
  termination = 100,
  genome = Seq(
    total_biomass in (0.0, 1.0),
    mu in (0.0, 1.0),
    NPP in (10.0, 10000.0),
    num_predators in (1, 10),
    num_herbivores in (1, 20),
    H0_mean in (1.0, 100.0),
    connectivity in (0.0, 1.0)    
    ),
  objective = Seq(
    total_biomass in (0.0 to 2.0 by 0.1)) 
) hook (workDirectory / "results_pse_new", frequency = 100) on env


